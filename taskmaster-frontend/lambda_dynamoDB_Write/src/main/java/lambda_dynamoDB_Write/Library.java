/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lambda_dynamoDB_Write;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.events.*;
import com.amazonaws.services.lambda.runtime.LambdaLogger;

import javax.json.JsonObject;

import java.util.*;

public class Library {
    private DynamoDB dynamoDb;
    private String DYNAMODB_TABLE_NAME = "taskmaster";
    private Regions REGION = Regions.US_WEST_2;

    public Task save(Task obj, Context context) {
        Task newTask = new Task();
        logMe(context);
        newTask.setTitle(obj.getTitle());
        newTask.setDescription(obj.getDescription());
        newTask.setStatus("Available");
        newTask.addHistory(new HistoryObj("Task created"));

        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        ddbMapper.save(newTask);

//        Response response = new Response(200, "\"body\":\"body\"");

        return newTask;
    }

    public APIGatewayProxyResponseEvent update(APIGatewayProxyRequestEvent event){
        Map<String,String> id = event.getPathParameters();
        System.out.println(id.get("id"));
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task taskToUpdate = ddbMapper.load(Task.class,id.get("id"));

        if (taskToUpdate != null && taskToUpdate.getStatus().equals("Available")) {
            taskToUpdate.setStatus("Assigned");
        } else if (taskToUpdate.getStatus().equals("Assigned")) {
            taskToUpdate.setStatus("Accepted");
        } else if (taskToUpdate.getStatus().equals("Accepted")) {
            taskToUpdate.setStatus("Finished");
        } else if (taskToUpdate.getStatus().equals("Finished")) {
            System.out.println("Already done!");
        }
        taskToUpdate.addHistory(new HistoryObj("--> " + taskToUpdate.getStatus()));

        ddbMapper.save(taskToUpdate);
        APIGatewayProxyResponseEvent res = new APIGatewayProxyResponseEvent();
        res.setBody("Task updated!");
        return res;
    }

    public APIGatewayProxyResponseEvent assignTask(APIGatewayProxyRequestEvent event) {
        Map<String,String> urlParams = event.getPathParameters();
        System.out.println(urlParams.get("id"));
        System.out.println(urlParams.get("assignee"));
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task taskToAssign = ddbMapper.load(Task.class, urlParams.get("id"));
        taskToAssign.setAssignee(urlParams.get("assignee"));
        taskToAssign.addHistory(new HistoryObj("--> Assigned to " + urlParams.get("assignee")));
        ddbMapper.save(taskToAssign);

        APIGatewayProxyResponseEvent res = new APIGatewayProxyResponseEvent();
        res.setBody("Task Assigned!");
        return res;
    }

    public APIGatewayProxyResponseEvent deleteTask(APIGatewayProxyRequestEvent event) {
        Map<String,String> urlParams = event.getPathParameters();
        System.out.println(urlParams.get("id"));
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        Task taskToDelete = ddbMapper.load(Task.class, urlParams.get("id"));
        ddbMapper.delete(taskToDelete);

        APIGatewayProxyResponseEvent res = new APIGatewayProxyResponseEvent();
        res.setBody("Task Deleted!");
        return res;
    }


    public boolean logMe(Context context) {
        LambdaLogger logger = context.getLogger();
        logger.log("This has been logged: " + context.toString());
        return true;
    }
}
